/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sample;

import java.io.InputStream;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPrivateKey;

import org.springframework.core.io.ClassPathResource;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.converter.RsaKeyConverters;
import org.springframework.security.core.Authentication;
import org.springframework.security.saml2.credentials.Saml2X509Credential;
import org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider;
import org.springframework.security.saml2.provider.service.authentication.Saml2Authentication;
import org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration;

import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.DECRYPTION;
import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.SIGNING;
import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.VERIFICATION;

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	RelyingPartyRegistration getSaml2AuthenticationConfiguration() {
		// remote IDP entity ID
		String idpEntityId = "https://simplesaml-for-spring-saml.cfapps.io/saml2/idp/metadata.php";
		// remote WebSSO Endpoint - Where to Send AuthNRequests to
		String webSsoEndpoint = "https://simplesaml-for-spring-saml.cfapps.io/saml2/idp/SSOService.php";
		// local registration ID
		String registrationId = "simplesamlphp";
		// local entity ID - autogenerated based on URL
		//String localEntityIdTemplate = "xxxxxxxxxxxx.local";
		// local signing (and decryption key)
		Saml2X509Credential signingCredential;
		try (InputStream priv = new ClassPathResource("credentials/rp-private.key").getInputStream();
			 InputStream cert = new ClassPathResource("credentials/rp-certificate.crt").getInputStream()) {
			RSAPrivateKey key = RsaKeyConverters.pkcs8().convert(priv);
			X509Certificate c = (X509Certificate) CertificateFactory.getInstance("X.509").generateCertificate(cert);
			signingCredential = new Saml2X509Credential(key, c, SIGNING, DECRYPTION);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}

		Saml2X509Credential idpVerificationCertificate;
		try (InputStream pub = new ClassPathResource("credentials/idp-certificate.crt").getInputStream()) {
			X509Certificate c = (X509Certificate) CertificateFactory.getInstance("X.509").generateCertificate(pub);
			idpVerificationCertificate = new Saml2X509Credential(c, VERIFICATION);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}

		//Saml2X509Credential signingCredential = getSigningCredential(); //private method not included
		// IDP certificate for verification of incoming messages
		//Saml2X509Credential idpVerificationCertificate = getVerificationCertificate();  //private method not included
		//String acsUrlTemplate = "https://xxxxxxxxxxxx.local/success"; //REST endpoint, see below
		String acsUrlTemplate = "{baseUrl}/login/saml2/sso/{registrationId}";
		return RelyingPartyRegistration.withRegistrationId(registrationId)
				.providerDetails(config -> config.entityId(idpEntityId))
				.providerDetails(config -> config.webSsoUrl(webSsoEndpoint))
				.credentials(c -> c.add(signingCredential))
				.credentials(c -> c.add(idpVerificationCertificate))
				//.localEntityIdTemplate(localEntityIdTemplate)
				.assertionConsumerServiceUrlTemplate(acsUrlTemplate)
				.build();
	}


	@Override
	protected void configure(HttpSecurity http) throws Exception {

		// Just a test
		OpenSamlAuthenticationProvider provider = new OpenSamlAuthenticationProvider();

		http
			.authorizeRequests(authz -> authz
				.antMatchers("/error").permitAll()
				.anyRequest().authenticated()
			)
			.saml2Login(saml2 -> saml2
				.authenticationManager(a -> {
					Authentication result = provider.authenticate(a);
					Saml2Authentication saml2Authentication = (Saml2Authentication) result;
					return result;
				})
				.relyingPartyRegistrationRepository(
					new InMemoryRelyingPartyRegistrationRepository(getSaml2AuthenticationConfiguration())
				)
			);
	}
}
